AzizSource: jika saya ingin memasukkan data surat yang dibuat kedalam sebuah template seperti pada folder contoh surat, metode apa yang sebiknya digunakan.

saya ingin dapat dieksport kedalam bentuk docx maupun pdf.

GitHub Copilot: Saya akan menganalisis kebutuhan Anda untuk memasukkan data surat ke dalam template dan mengekspornya ke format DOCX/PDF. Mari saya periksa struktur proyek dan template yang tersedia. Berdasarkan analisis proyek Anda, saya melihat bahwa Anda sudah memiliki:
1. Template surat dalam format DOCX di folder `contoh-surat`
2. Library `docx` dan `jspdf` sudah terinstall
3. Struktur data surat yang terorganisir

Untuk memasukkan data surat ke dalam template dan mengekspornya ke DOCX/PDF, saya merekomendasikan **metode hybrid** dengan pendekatan berikut:

## ðŸŽ¯ **Metode yang Direkomendasikan**

### 1. **Template Engine + DOCX Generation**
Gunakan kombinasi template string replacement dan library `docx` untuk menghasilkan dokumen DOCX yang dapat dikonversi ke PDF.

### 2. **Implementasi yang Disarankan**

Buat file utility untuk template processing:

````typescript
import { Document, Packer, Paragraph, TextRun, AlignmentType, Header, Footer } from 'docx';
import { LetterData, letterTypes } from '@/types/letterTypes';
import { Resident } from '@/utils/spreadsheetService';
import { formatDate } from '@/utils/dateFormatter';

// Template configurations for each type of letter
const templateConfigs = {
  'USULAN_PESERTA': {
    title: 'SURAT KETERANGAN USULAN PESERTA BPJS JAMKESDA',
    headerText: 'PEMERINTAH KABUPATEN KLATEN',
    officeText: 'KECAMATAN [KECAMATAN] DESA [DESA]'
  },
  'TIDAK_MAMPU': {
    title: 'SURAT KETERANGAN TIDAK MAMPU',
    headerText: 'PEMERINTAH KABUPATEN KLATEN',
    officeText: 'KECAMATAN [KECAMATAN] DESA [DESA]'
  },
  // Add other letter types...
};

export function generateLetterDocument(letterData: any): Document {
  const { resident, letterType, formData } = letterData;
  const config = templateConfigs[letterType as keyof typeof templateConfigs];
  
  if (!config) {
    throw new Error(`Template not found for letter type: ${letterType}`);
  }

  const document = new Document({
    sections: [{
      properties: {},
      headers: {
        default: new Header({
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: config.headerText,
                  bold: true,
                  size: 24,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: config.officeText.replace('[KECAMATAN]', 'TULUNG').replace('[DESA]', 'SIRANTEN'),
                  size: 20,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
          ],
        }),
      },
      children: [
        // Letter content
        new Paragraph({
          children: [
            new TextRun({
              text: config.title,
              bold: true,
              size: 24,
            }),
          ],
          alignment: AlignmentType.CENTER,
          spacing: { after: 400 },
        }),
        
        // Letter body based on type
        ...generateLetterBody(resident, letterType, formData),
        
        // Signature section
        new Paragraph({
          children: [
            new TextRun({
              text: `Siranten, ${formatDate(new Date())}`,
            }),
          ],
          alignment: AlignmentType.RIGHT,
          spacing: { before: 400 },
        }),
        new Paragraph({
          children: [
            new TextRun({
              text: "Kepala Desa Siranten",
              bold: true,
            }),
          ],
          alignment: AlignmentType.RIGHT,
          spacing: { after: 800 },
        }),
        new Paragraph({
          children: [
            new TextRun({
              text: "[NAMA KEPALA DESA]",
              bold: true,
            }),
          ],
          alignment: AlignmentType.RIGHT,
        }),
      ],
    }],
  });

  return document;
}

function generateLetterBody(resident: Resident, letterType: string, formData: any): Paragraph[] {
  const baseInfo = [
    new Paragraph({
      children: [
        new TextRun({ text: "Yang bertanda tangan di bawah ini, Kepala Desa Siranten Kecamatan Tulung Kabupaten Klaten, dengan ini menerangkan bahwa:" }),
      ],
      spacing: { after: 200 },
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Nama\t\t: ${resident.namaLengkap}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `NIK\t\t: ${resident.nik}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Tempat/Tgl Lahir\t: ${resident.tempatLahir}, ${resident.tglLahir}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Jenis Kelamin\t\t: ${resident.jenisKelamin}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Agama\t\t: ${resident.agama}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Pekerjaan\t\t: ${resident.pekerjaan}` }),
      ],
    }),
    new Paragraph({
      children: [
        new TextRun({ text: `Alamat\t\t: ${resident.alamat} RT ${resident.rt} RW ${resident.rw}` }),
      ],
      spacing: { after: 300 },
    }),
  ];

  // Add specific content based on letter type
  switch (letterType) {
    case 'TIDAK_MAMPU':
      return [
        ...baseInfo,
        new Paragraph({
          children: [
            new TextRun({ 
              text: `Adalah benar penduduk Desa Siranten dan berdasarkan pengamatan kami bahwa yang bersangkutan termasuk keluarga TIDAK MAMPU. Surat keterangan ini dibuat untuk keperluan ${formData.keperluan}.` 
            }),
          ],
          spacing: { after: 200 },
        }),
      ];
    
    case 'DOMISILI':
      return [
        ...baseInfo,
        new Paragraph({
          children: [
            new TextRun({ 
              text: `Adalah benar berdomisili di ${formData.alamatDomisili} selama ${formData.lamaTinggal} dan surat keterangan ini dibuat untuk keperluan ${formData.keperluan}.` 
            }),
          ],
          spacing: { after: 200 },
        }),
      ];
    
    // Add other letter types...
    default:
      return baseInfo;
  }
}

// Export functions for different formats
export async function generateDOCX(letterData: any): Promise<Blob> {
  const doc = generateLetterDocument(letterData);
  const buffer = await Packer.toBlob(doc);
  return buffer;
}

export async function generatePDF(letterData: any): Promise<void> {
  // First generate DOCX, then convert to PDF using jsPDF
  const docxBlob = await generateDOCX(letterData);
  
  // For PDF generation, you could:
  // 1. Use a service that converts DOCX to PDF
  // 2. Use html2pdf with HTML templates
  // 3. Build PDF directly with jsPDF (more complex for formatted documents)
  
  // For now, let's use HTML template approach
  const htmlContent = generateHTMLTemplate(letterData);
  
  const { jsPDF } = await import('jspdf');
  const html2canvas = (await import('html2canvas')).default;
  
  // Create temporary div for rendering
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = htmlContent;
  tempDiv.style.position = 'absolute';
  tempDiv.style.left = '-9999px';
  tempDiv.style.width = '210mm'; // A4 width
  tempDiv.style.padding = '20mm';
  tempDiv.style.fontFamily = 'Times New Roman, serif';
  tempDiv.style.fontSize = '12pt';
  tempDiv.style.lineHeight = '1.5';
  tempDiv.style.backgroundColor = 'white';
  
  document.body.appendChild(tempDiv);
  
  try {
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: 'white'
    });
    
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
    
    const imgX = (pdfWidth - imgWidth * ratio) / 2;
    const imgY = 30;
    
    pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
    
    // Generate filename
    const letterTypeInfo = letterTypes.find(lt => lt.id === letterData.letterType);
    const letterTitle = letterTypeInfo?.title || 'Surat';
    const residentName = letterData.resident.namaLengkap || 'Penduduk';
    const filename = `${letterTitle} - ${residentName}.pdf`;
    
    pdf.save(filename);
  } finally {
    document.body.removeChild(tempDiv);
  }
}

function generateHTMLTemplate(letterData: any): string {
  const { resident, letterType, formData } = letterData;
  const config = templateConfigs[letterType as keyof typeof templateConfigs];
  
  return `
    <div style="width: 210mm; min-height: 297mm; padding: 20mm; font-family: 'Times New Roman', serif; font-size: 12pt; line-height: 1.6;">
      <!-- Header -->
      <div style="text-align: center; margin-bottom: 30px;">
        <h2 style="margin: 0; font-size: 14pt; font-weight: bold;">${config?.headerText || 'PEMERINTAH KABUPATEN KLATEN'}</h2>
        <p style="margin: 5px 0; font-size: 12pt;">KECAMATAN TULUNG DESA SIRANTEN</p>
        <hr style="border: 1px solid black; margin: 10px 0;">
      </div>
      
      <!-- Title -->
      <div style="text-align: center; margin-bottom: 25px;">
        <h3 style="margin: 0; font-size: 14pt; font-weight: bold; text-decoration: underline;">${config?.title || 'SURAT KETERANGAN'}</h3>
        <p style="margin: 5px 0;">Nomor: ${formData.nomorSurat || '[NOMOR SURAT]'}</p>
      </div>
      
      <!-- Body -->
      <div style="margin-bottom: 30px;">
        <p>Yang bertanda tangan di bawah ini, Kepala Desa Siranten Kecamatan Tulung Kabupaten Klaten, dengan ini menerangkan bahwa:</p>
        
        <table style="width: 100%; margin: 20px 0; border-collapse: collapse;">
          <tr>
            <td style="width: 120px; vertical-align: top; padding: 3px 0;">Nama</td>
            <td style="width: 20px; vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0; font-weight: bold;">${resident.namaLengkap}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">NIK</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.nik}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">Tempat/Tgl Lahir</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.tempatLahir}, ${resident.tglLahir}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">Jenis Kelamin</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.jenisKelamin}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">Agama</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.agama}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">Pekerjaan</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.pekerjaan}</td>
          </tr>
          <tr>
            <td style="vertical-align: top; padding: 3px 0;">Alamat</td>
            <td style="vertical-align: top; padding: 3px 0;">:</td>
            <td style="vertical-align: top; padding: 3px 0;">${resident.alamat} RT ${resident.rt} RW ${resident.rw}</td>
          </tr>
        </table>
        
        ${generateLetterSpecificContent(letterType, formData)}
      </div>
      
      <!-- Footer -->
      <div style="margin-top: 50px;">
        <div style="float: right; text-align: center; width: 200px;">
          <p>Siranten, ${formatDate(new Date())}</p>
          <p style="margin-top: 10px; font-weight: bold;">Kepala Desa Siranten</p>
          <div style="height: 80px;"></div>
          <p style="font-weight: bold; text-decoration: underline;">[NAMA KEPALA DESA]</p>
        </div>
        <div style="clear: both;"></div>
      </div>
    </div>
  `;
}

function generateLetterSpecificContent(letterType: string, formData: any): string {
  switch (letterType) {
    case 'TIDAK_MAMPU':
      return `<p>Adalah benar penduduk Desa Siranten dan berdasarkan pengamatan kami bahwa yang bersangkutan termasuk keluarga <strong>TIDAK MAMPU</strong>. Surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong>.</p>`;
    
    case 'DOMISILI':
      return `<p>Adalah benar berdomisili di <strong>${formData.alamatDomisili}</strong> selama <strong>${formData.lamaTinggal}</strong> dan surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong>.</p>`;
    
    case 'USAHA':
      return `<p>Adalah benar memiliki usaha dan surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong> dengan masa berlaku <strong>${formData.masaBerlaku}</strong>.</p>`;
    
    // Add other letter types...
    default:
      return '<p>Surat keterangan ini dibuat sesuai dengan keadaan yang sebenarnya.</p>';
  }
}
````

### 3. **Update Preview Page**

Update halaman preview untuk menggunakan template engine:

````typescript
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { generateDOCX, generatePDF } from "@/utils/letterTemplates";

export default function SuratPreviewPage() {
  const router = useRouter();
  const [letterData, setLetterData] = useState<any>(null);
  const [isGeneratingDOCX, setIsGeneratingDOCX] = useState(false);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [exportFormat, setExportFormat] = useState<'pdf' | 'docx'>('pdf');

  useEffect(() => {
    // Get letter data from localStorage
    const storedData = localStorage.getItem("letterPreviewData");
    if (storedData) {
      setLetterData(JSON.parse(storedData));
    } else {
      // Redirect back to create page if no data
      router.push("/surat/create");
    }
  }, [router]);

  const handleDownloadDOCX = async () => {
    if (!letterData) return;
    
    setIsGeneratingDOCX(true);
    try {
      const blob = await generateDOCX(letterData);
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      
      const letterTitle = letterData.letterType.replace(/_/g, ' ');
      const residentName = letterData.resident.namaLengkap;
      const filename = `${letterTitle} - ${residentName}.docx`;
      
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (err) {
      console.error("Error generating DOCX:", err);
      alert("Terjadi kesalahan saat mengunduh DOCX. Silakan coba lagi.");
    } finally {
      setIsGeneratingDOCX(false);
    }
  };

  const handleDownloadPDF = async () => {
    if (!letterData) return;
    
    setIsGeneratingPDF(true);
    try {
      await generatePDF(letterData);
    } catch (err) {
      console.error("Error generating PDF:", err);
      alert("Terjadi kesalahan saat mengunduh PDF. Silakan coba lagi.");
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  const handleExport = () => {
    if (exportFormat === 'pdf') {
      handleDownloadPDF();
    } else {
      handleDownloadDOCX();
    }
  };

  const handleEdit = () => {
    router.back();
  };

  if (!letterData) {
    return (
      <div className="flex flex-col items-center justify-start min-h-screen bg-gray-100 p-6">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-4xl flex flex-col items-center justify-center min-h-[300px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="mt-4 text-gray-600">Memuat data surat...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-start min-h-screen bg-gray-100 p-6 text-gray-800">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-4xl">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Pratinjau Surat</h1>
          <div className="flex gap-3">
            <button
              onClick={handleEdit}
              className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors"
            >
              Edit
            </button>
            <Link href="/" className="text-blue-500 hover:underline">
              Dashboard
            </Link>
          </div>
        </div>

        {/* Export Options */}
        <div className="mb-6 p-4 bg-gray-50 rounded-lg">
          <div className="flex items-center gap-4 mb-4">
            <span className="font-medium">Format Export:</span>
            <label className="flex items-center">
              <input
                type="radio"
                name="exportFormat"
                value="pdf"
                checked={exportFormat === 'pdf'}
                onChange={(e) => setExportFormat(e.target.value as 'pdf')}
                className="mr-2"
              />
              PDF
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="exportFormat"
                value="docx"
                checked={exportFormat === 'docx'}
                onChange={(e) => setExportFormat(e.target.value as 'docx')}
                className="mr-2"
              />
              DOCX
            </label>
          </div>
          
          <button
            onClick={handleExport}
            disabled={isGeneratingPDF || isGeneratingDOCX}
            className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-md transition-colors ${
              (isGeneratingPDF || isGeneratingDOCX) ? "opacity-50 cursor-not-allowed" : ""
            }`}
          >
            {isGeneratingPDF
              ? "Mengunduh PDF..."
              : isGeneratingDOCX
              ? "Mengunduh DOCX..."
              : `Unduh ${exportFormat.toUpperCase()}`}
          </button>
        </div>

        {/* Letter Preview */}
        <div className="border border-gray-300 rounded-lg p-6 bg-white shadow-inner">
          <div 
            id="letter-content"
            className="max-w-none prose prose-sm"
            style={{
              fontFamily: 'Times New Roman, serif',
              fontSize: '12pt',
              lineHeight: '1.6',
              color: '#000'
            }}
            dangerouslySetInnerHTML={{
              __html: generateHTMLPreview(letterData)
            }}
          />
        </div>
      </div>
    </div>
  );
}

function generateHTMLPreview(letterData: any): string {
  const { resident, letterType, formData } = letterData;
  
  return `
    <div style="text-align: center; margin-bottom: 30px;">
      <h2 style="margin: 0; font-size: 16pt; font-weight: bold;">PEMERINTAH KABUPATEN KLATEN</h2>
      <p style="margin: 5px 0; font-size: 14pt;">KECAMATAN TULUNG DESA SIRANTEN</p>
      <hr style="border: 1px solid black; margin: 15px 0;">
    </div>
    
    <div style="text-align: center; margin-bottom: 25px;">
      <h3 style="margin: 0; font-size: 16pt; font-weight: bold; text-decoration: underline;">
        ${getLetterTitle(letterType)}
      </h3>
      <p style="margin: 10px 0;">Nomor: ${formData.nomorSurat || '[NOMOR SURAT]'}</p>
    </div>
    
    <div style="margin-bottom: 30px;">
      <p style="text-align: justify; margin-bottom: 15px;">Yang bertanda tangan di bawah ini, Kepala Desa Siranten Kecamatan Tulung Kabupaten Klaten, dengan ini menerangkan bahwa:</p>
      
      <table style="width: 100%; margin: 20px 0; border-collapse: collapse;">
        <tr><td style="width: 130px; padding: 5px 0; vertical-align: top;">Nama</td><td style="width: 20px; padding: 5px 0;">:</td><td style="padding: 5px 0; font-weight: bold;">${resident.namaLengkap}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">NIK</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.nik}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">Tempat/Tgl Lahir</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.tempatLahir}, ${resident.tglLahir}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">Jenis Kelamin</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.jenisKelamin}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">Agama</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.agama}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">Pekerjaan</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.pekerjaan}</td></tr>
        <tr><td style="padding: 5px 0; vertical-align: top;">Alamat</td><td style="padding: 5px 0;">:</td><td style="padding: 5px 0;">${resident.alamat} RT ${resident.rt} RW ${resident.rw}</td></tr>
      </table>
      
      <p style="text-align: justify; margin: 20px 0;">
        ${generateLetterBody(letterType, formData)}
      </p>
      
      <p style="text-align: justify; margin: 20px 0;">Demikian surat keterangan ini dibuat dengan sebenarnya dan dapat dipergunakan sebagaimana mestinya.</p>
    </div>
    
    <div style="margin-top: 40px;">
      <div style="float: right; text-align: center; width: 250px;">
        <p>Siranten, ${new Date().toLocaleDateString('id-ID', { 
          day: 'numeric', 
          month: 'long', 
          year: 'numeric' 
        })}</p>
        <p style="margin-top: 15px; font-weight: bold;">Kepala Desa Siranten</p>
        <div style="height: 80px;"></div>
        <p style="font-weight: bold; text-decoration: underline;">[NAMA KEPALA DESA]</p>
      </div>
      <div style="clear: both;"></div>
    </div>
  `;
}

function getLetterTitle(letterType: string): string {
  const titles: Record<string, string> = {
    'TIDAK_MAMPU': 'SURAT KETERANGAN TIDAK MAMPU',
    'DOMISILI': 'SURAT KETERANGAN DOMISILI',
    'USAHA': 'SURAT KETERANGAN USAHA',
    'USULAN_PESERTA': 'SURAT KETERANGAN USULAN PESERTA BPJS JAMKESDA',
    // Add other types...
  };
  return titles[letterType] || 'SURAT KETERANGAN';
}

function generateLetterBody(letterType: string, formData: any): string {
  switch (letterType) {
    case 'TIDAK_MAMPU':
      return `Adalah benar penduduk Desa Siranten dan berdasarkan pengamatan kami bahwa yang bersangkutan termasuk keluarga <strong>TIDAK MAMPU</strong>. Surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong>.`;
    
    case 'DOMISILI':
      return `Adalah benar berdomisili di <strong>${formData.alamatDomisili}</strong> selama <strong>${formData.lamaTinggal}</strong> dan surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong>.`;
    
    case 'USAHA':
      return `Adalah benar memiliki usaha dan surat keterangan ini dibuat untuk keperluan <strong>${formData.keperluan}</strong> dengan masa berlaku <strong>${formData.masaBerlaku}</strong>.`;
    
    default:
      return 'Surat keterangan ini dibuat sesuai dengan keadaan yang sebenarnya.';
  }
}
````

### 4. **Install Dependencies Tambahan**

Anda perlu menambahkan beberapa library:

```powershell
npm install html2canvas file-saver
npm install --save-dev @types/file-saver
```

## ðŸŽ¯ **Keunggulan Metode Ini**

1. **Fleksibel**: Template bisa disesuaikan per jenis surat
2. **Konsisten**: Format output seragam dan profesional  
3. **Multi-format**: Mendukung DOCX dan PDF
4. **Mudah maintenance**: Template terpisah dari logic
5. **Performance**: Generate client-side, tidak perlu server

## ðŸ“‹ **Langkah Implementasi**

1. Buat file `letterTemplates.ts` dengan kode di atas
2. Update page.tsx untuk menggunakan template engine
3. Install dependencies tambahan
4. Test dengan berbagai jenis surat
5. Sesuaikan template dengan format resmi desa

Metode ini memberikan kontrol penuh terhadap format dokumen dan mudah dikustomisasi sesuai kebutuhan.

Similar code found with 1 license type

AzizSource: dengan metode tersebut sulit untuk mengatur style pada docs agar sesuai dengan yang diinginkan. apakah memungkinkan jika kita membuat template di aplikasi google docs lalu mendapatkan datanya melalui api untuk diisi variabel variabel yang diperlukan?

GitHub Copilot: Ya, menggunakan Google Docs sebagai template adalah ide yang sangat bagus! Ini memungkinkan Anda membuat template yang lebih profesional dengan formatting yang tepat, dan kemudian mengisi variabel melalui Google Docs API. Mari saya tunjukkan implementasinya: Ya, menggunakan Google Docs sebagai template dan Google Docs API adalah solusi yang sangat baik! Dengan pendekatan ini, Anda dapat:

1. **Membuat template profesional** di Google Docs dengan formatting yang tepat
2. **Menggunakan placeholder variables** (seperti `{{NAMA_LENGKAP}}`, `{{NIK}}`, dll.)
3. **Mengganti variable secara otomatis** melalui API
4. **Export ke PDF/DOCX** langsung dari Google Docs

Mari saya tunjukkan implementasinya:

## ðŸŽ¯ **Langkah 1: Setup Google Docs API**

Pertama, install dependencies yang diperlukan:

```powershell
npm install googleapis
```

## ðŸŽ¯ **Langkah 2: Buat Service untuk Google Docs**

````typescript
import { google } from 'googleapis';
import Cookies from 'js-cookie';

// Template IDs untuk setiap jenis surat
const TEMPLATE_IDS = {
  'TIDAK_MAMPU': '1your-google-docs-template-id-for-tidak-mampu',
  'DOMISILI': '1your-google-docs-template-id-for-domisili',
  'USAHA': '1your-google-docs-template-id-for-usaha',
  'USULAN_PESERTA': '1your-google-docs-template-id-for-usulan-peserta',
  // Tambahkan template lainnya...
};

interface TemplateVariables {
  [key: string]: string;
}

export class GoogleDocsService {
  private docs: any;
  private drive: any;

  constructor(accessToken: string) {
    const auth = new google.auth.OAuth2();
    auth.setCredentials({ access_token: accessToken });
    
    this.docs = google.docs({ version: 'v1', auth });
    this.drive = google.drive({ version: 'v3', auth });
  }

  /**
   * Membuat surat dari template dengan mengganti variabel
   */
  async generateLetterFromTemplate(
    letterType: string,
    variables: TemplateVariables
  ): Promise<{ documentId: string; documentUrl: string }> {
    try {
      const templateId = TEMPLATE_IDS[letterType as keyof typeof TEMPLATE_IDS];
      if (!templateId) {
        throw new Error(`Template not found for letter type: ${letterType}`);
      }

      // 1. Buat copy dari template
      const copyResponse = await this.drive.files.copy({
        fileId: templateId,
        requestBody: {
          name: `Surat ${letterType} - ${variables.NAMA_LENGKAP || 'Draft'} - ${new Date().toLocaleDateString('id-ID')}`,
        },
      });

      const newDocumentId = copyResponse.data.id;
      if (!newDocumentId) {
        throw new Error('Failed to create document copy');
      }

      // 2. Dapatkan konten dokumen
      const documentResponse = await this.docs.documents.get({
        documentId: newDocumentId,
      });

      // 3. Buat requests untuk mengganti semua variabel
      const requests = this.createReplaceRequests(documentResponse.data, variables);

      // 4. Jalankan batch update
      if (requests.length > 0) {
        await this.docs.documents.batchUpdate({
          documentId: newDocumentId,
          requestBody: {
            requests: requests,
          },
        });
      }

      // 5. Dapatkan URL dokumen
      const documentUrl = `https://docs.google.com/document/d/${newDocumentId}/edit`;

      return {
        documentId: newDocumentId,
        documentUrl: documentUrl,
      };
    } catch (error) {
      console.error('Error generating letter from template:', error);
      throw error;
    }
  }

  /**
   * Membuat requests untuk mengganti variabel dalam dokumen
   */
  private createReplaceRequests(document: any, variables: TemplateVariables): any[] {
    const requests: any[] = [];

    // Iterate melalui semua variabel dan buat replace request
    Object.entries(variables).forEach(([key, value]) => {
      const placeholder = `{{${key}}}`;
      
      requests.push({
        replaceAllText: {
          containsText: {
            text: placeholder,
            matchCase: false,
          },
          replaceText: value || '',
        },
      });
    });

    return requests;
  }

  /**
   * Export dokumen ke PDF
   */
  async exportToPDF(documentId: string): Promise<Blob> {
    try {
      const response = await this.drive.files.export({
        fileId: documentId,
        mimeType: 'application/pdf',
      }, {
        responseType: 'stream'
      });

      // Convert stream to blob
      const chunks: any[] = [];
      
      return new Promise((resolve, reject) => {
        response.data.on('data', (chunk: any) => chunks.push(chunk));
        response.data.on('end', () => {
          const buffer = Buffer.concat(chunks);
          const blob = new Blob([buffer], { type: 'application/pdf' });
          resolve(blob);
        });
        response.data.on('error', reject);
      });
    } catch (error) {
      console.error('Error exporting to PDF:', error);
      throw error;
    }
  }

  /**
   * Export dokumen ke DOCX
   */
  async exportToDOCX(documentId: string): Promise<Blob> {
    try {
      const response = await this.drive.files.export({
        fileId: documentId,
        mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      }, {
        responseType: 'stream'
      });

      // Convert stream to blob
      const chunks: any[] = [];
      
      return new Promise((resolve, reject) => {
        response.data.on('data', (chunk: any) => chunks.push(chunk));
        response.data.on('end', () => {
          const buffer = Buffer.concat(chunks);
          const blob = new Blob([buffer], { 
            type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
          });
          resolve(blob);
        });
        response.data.on('error', reject);
      });
    } catch (error) {
      console.error('Error exporting to DOCX:', error);
      throw error;
    }
  }

  /**
   * Menghapus dokumen temporary
   */
  async deleteDocument(documentId: string): Promise<void> {
    try {
      await this.drive.files.delete({
        fileId: documentId,
      });
    } catch (error) {
      console.error('Error deleting document:', error);
      // Don't throw error for cleanup operations
    }
  }
}

/**
 * Helper function untuk membuat template variables dari data surat
 */
export function createTemplateVariables(letterData: any): TemplateVariables {
  const { resident, formData } = letterData;
  
  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });

  return {
    // Data Penduduk
    NAMA_LENGKAP: resident.namaLengkap || '',
    NIK: resident.nik || '',
    NO_KK: resident.noKK || '',
    TEMPAT_LAHIR: resident.tempatLahir || '',
    TGL_LAHIR: resident.tglLahir || '',
    JENIS_KELAMIN: resident.jenisKelamin || '',
    AGAMA: resident.agama || '',
    PEKERJAAN: resident.pekerjaan || '',
    ALAMAT: resident.alamat || '',
    RT: resident.rt || '',
    RW: resident.rw || '',
    
    // Data Surat
    TANGGAL_SURAT: formattedDate,
    NOMOR_SURAT: formData.nomorSurat || '',
    
    // Data spesifik per jenis surat
    KEPERLUAN: formData.keperluan || '',
    ALAMAT_DOMISILI: formData.alamatDomisili || '',
    LAMA_TINGGAL: formData.lamaTinggal || '',
    MASA_BERLAKU: formData.masaBerlaku || '',
    BIN_BINTI: formData.binBinti || '',
    KEWARGANEGARAAN: formData.kewarganegaraan || '',
    ALAMAT_KTP: formData.alamatKTP || '',
    
    // Data Kepala Desa (bisa dikonfigurasi)
    NAMA_KEPALA_DESA: '[NAMA KEPALA DESA]',
    DESA: 'Siranten',
    KECAMATAN: 'Tulung',
    KABUPATEN: 'Klaten',
  };
}

/**
 * Factory function untuk membuat instance GoogleDocsService
 */
export function createGoogleDocsService(): GoogleDocsService {
  const accessToken = Cookies.get('auth_token');
  if (!accessToken) {
    throw new Error('Not authenticated');
  }
  return new GoogleDocsService(accessToken);
}
````

## ðŸŽ¯ **Langkah 3: Update Preview Page**

````typescript
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { 
  GoogleDocsService, 
  createGoogleDocsService, 
  createTemplateVariables 
} from "@/utils/googleDocsService";

export default function SuratPreviewPage() {
  const router = useRouter();
  const [letterData, setLetterData] = useState<any>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [currentDocumentId, setCurrentDocumentId] = useState<string | null>(null);
  const [documentUrl, setDocumentUrl] = useState<string | null>(null);
  const [exportFormat, setExportFormat] = useState<'pdf' | 'docx'>('pdf');

  useEffect(() => {
    // Get letter data from localStorage
    const storedData = localStorage.getItem("letterPreviewData");
    if (storedData) {
      const data = JSON.parse(storedData);
      setLetterData(data);
      generateLetterPreview(data);
    } else {
      // Redirect back to create page if no data
      router.push("/surat/create");
    }
  }, [router]);

  const generateLetterPreview = async (data: any) => {
    setIsGenerating(true);
    try {
      const docsService = createGoogleDocsService();
      const variables = createTemplateVariables(data);
      
      const result = await docsService.generateLetterFromTemplate(
        data.letterType,
        variables
      );
      
      setCurrentDocumentId(result.documentId);
      setDocumentUrl(result.documentUrl);
    } catch (error) {
      console.error('Error generating letter preview:', error);
      alert('Gagal membuat pratinjau surat. Silakan coba lagi.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleExport = async () => {
    if (!currentDocumentId || !letterData) return;
    
    setIsExporting(true);
    try {
      const docsService = createGoogleDocsService();
      let blob: Blob;
      let filename: string;
      
      const letterTitle = getLetterTitle(letterData.letterType);
      const residentName = letterData.resident.namaLengkap;
      
      if (exportFormat === 'pdf') {
        blob = await docsService.exportToPDF(currentDocumentId);
        filename = `${letterTitle} - ${residentName}.pdf`;
      } else {
        blob = await docsService.exportToDOCX(currentDocumentId);
        filename = `${letterTitle} - ${residentName}.docx`;
      }
      
      // Download file
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('Error exporting document:', error);
      alert('Gagal mengekspor dokumen. Silakan coba lagi.');
    } finally {
      setIsExporting(false);
    }
  };

  const handleEdit = () => {
    router.back();
  };

  const handleOpenInGoogleDocs = () => {
    if (documentUrl) {
      window.open(documentUrl, '_blank');
    }
  };

  // Cleanup document when component unmounts
  useEffect(() => {
    return () => {
      if (currentDocumentId) {
        try {
          const docsService = createGoogleDocsService();
          docsService.deleteDocument(currentDocumentId);
        } catch (error) {
          console.error('Error cleaning up document:', error);
        }
      }
    };
  }, [currentDocumentId]);

  if (isGenerating) {
    return (
      <div className="flex flex-col items-center justify-start min-h-screen bg-gray-100 p-6">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-4xl flex flex-col items-center justify-center min-h-[300px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="mt-4 text-gray-600">Membuat surat dari template...</p>
        </div>
      </div>
    );
  }

  if (!letterData || !currentDocumentId) {
    return (
      <div className="flex flex-col items-center justify-start min-h-screen bg-gray-100 p-6">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-4xl flex flex-col items-center justify-center min-h-[300px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p className="mt-4 text-gray-600">Memuat data surat...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-start min-h-screen bg-gray-100 p-6 text-gray-800">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-4xl">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Pratinjau Surat</h1>
          <div className="flex gap-3">
            <button
              onClick={handleEdit}
              className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors"
            >
              Edit
            </button>
            <Link href="/" className="text-blue-500 hover:underline">
              Dashboard
            </Link>
          </div>
        </div>

        {/* Info */}
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 className="font-semibold text-blue-800 mb-2">Surat Berhasil Dibuat!</h3>
          <p className="text-blue-700 mb-3">
            Surat telah dibuat menggunakan template Google Docs dan semua data telah terisi otomatis.
          </p>
          <div className="flex flex-wrap gap-3">
            <button
              onClick={handleOpenInGoogleDocs}
              className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition-colors"
            >
              Buka di Google Docs
            </button>
          </div>
        </div>

        {/* Export Options */}
        <div className="mb-6 p-4 bg-gray-50 rounded-lg">
          <div className="flex items-center gap-4 mb-4">
            <span className="font-medium">Format Export:</span>
            <label className="flex items-center">
              <input
                type="radio"
                name="exportFormat"
                value="pdf"
                checked={exportFormat === 'pdf'}
                onChange={(e) => setExportFormat(e.target.value as 'pdf')}
                className="mr-2"
              />
              PDF
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="exportFormat"
                value="docx"
                checked={exportFormat === 'docx'}
                onChange={(e) => setExportFormat(e.target.value as 'docx')}
                className="mr-2"
              />
              DOCX
            </label>
          </div>
          
          <button
            onClick={handleExport}
            disabled={isExporting}
            className={`bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-6 rounded-md transition-colors ${
              isExporting ? "opacity-50 cursor-not-allowed" : ""
            }`}
          >
            {isExporting
              ? `Mengunduh ${exportFormat.toUpperCase()}...`
              : `Unduh ${exportFormat.toUpperCase()}`}
          </button>
        </div>

        {/* Document Preview Iframe */}
        <div className="border border-gray-300 rounded-lg overflow-hidden">
          <div className="bg-gray-100 p-3 border-b border-gray-300">
            <h3 className="font-semibold text-gray-700">Preview Dokumen</h3>
            <p className="text-sm text-gray-600">
              Dokumen dapat diedit langsung di Google Docs dengan mengklik "Buka di Google Docs"
            </p>
          </div>
          
          {documentUrl && (
            <iframe
              src={`${documentUrl.replace('/edit', '/preview')}`}
              width="100%"
              height="600"
              className="border-0"
              title="Document Preview"
            />
          )}
        </div>

        {/* Summary */}
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <h3 className="font-semibold mb-3">Ringkasan Surat</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="font-medium">Jenis Surat:</span>
              <p>{getLetterTitle(letterData.letterType)}</p>
            </div>
            <div>
              <span className="font-medium">Nama Penduduk:</span>
              <p>{letterData.resident.namaLengkap}</p>
            </div>
            <div>
              <span className="font-medium">NIK:</span>
              <p>{letterData.resident.nik}</p>
            </div>
            <div>
              <span className="font-medium">Tanggal Dibuat:</span>
              <p>{new Date().toLocaleDateString('id-ID')}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function getLetterTitle(letterType: string): string {
  const titles: Record<string, string> = {
    'TIDAK_MAMPU': 'Surat Keterangan Tidak Mampu',
    'DOMISILI': 'Surat Keterangan Domisili',
    'USAHA': 'Surat Keterangan Usaha',
    'USULAN_PESERTA': 'Surat Keterangan Usulan Peserta BPJS',
    // Add other types...
  };
  return titles[letterType] || 'Surat Keterangan';
}
````

## ðŸŽ¯ **Langkah 4: Update Permissions untuk Google OAuth**

Update scope OAuth untuk menambahkan akses Google Docs:

````typescript
// Pada bagian scope, tambahkan Google Docs permissions:

const handleLoginClick = () => {
  // @ts-ignore
  if (!window.google?.accounts?.oauth2) {
    setError("Google OAuth not available. Please refresh the page.");
    return;
  }

  // @ts-ignore
  window.google.accounts.oauth2
    .initTokenClient({
      client_id: NEXT_PUBLIC_CLIENT_ID,
      // Tambahkan Google Docs permissions
      scope: [
        "email",
        "profile", 
        "https://www.googleapis.com/auth/spreadsheets.readonly",
        "https://www.googleapis.com/auth/documents",
        "https://www.googleapis.com/auth/drive.file"
      ].join(" "),
      callback: handleAuthSuccess,
      error_callback: handleAuthError,
    })
    .requestAccessToken();
};
````

## ðŸŽ¯ **Langkah 5: Buat Template di Google Docs**

1. **Buat dokumen Google Docs** untuk setiap jenis surat
2. **Gunakan placeholder variables** seperti:
   - `{{NAMA_LENGKAP}}`
   - `{{NIK}}`
   - `{{ALAMAT}}`
   - `{{KEPERLUAN}}`
   - dll.

3. **Format dokumen** sesuai keinginan dengan:
   - Header resmi
   - Logo desa
   - Styling yang tepat
   - Format tabel yang rapi

4. **Catat Document ID** dari URL dan masukkan ke `TEMPLATE_IDS` di service

## ðŸŽ¯ **Keunggulan Metode Google Docs**

âœ… **Professional formatting** - Template dibuat langsung di Google Docs  
âœ… **Easy maintenance** - Template bisa diedit kapan saja  
âœ… **Real-time preview** - Preview langsung dalam iframe  
âœ… **Multiple export formats** - PDF & DOCX native support  
âœ… **Collaboration ready** - Bisa dibagikan dan diedit bersama  
âœ… **Version control** - Google Docs memiliki history otomatis  

Dengan metode ini, Anda mendapatkan hasil yang sangat profesional dan mudah dikelola!

Similar code found with 2 license types